@isTest
public class Tools_callOutJSONObjectTest {
    static testMethod void testParse(){
        nleCalloutJSONObject obj = new nleCalloutJSONObject();
        obj.error = '';
        obj.error_description = '';
        obj.name = '';
        nleCalloutJSONObject.Fields f = new nleCalloutJSONObject.Fields();
        f.name = '';
        f.label = '';
        f.type = '';
        f.custom = false;
        f.length = 0;
        f.defaultValue = '';
        f.referenceTo = null;
        f.nillable = true;
        f.externalId = true;
        List<nleCalloutJSONObject.PicklistValues> picks = new List<nleCalloutJSONObject.PicklistValues>();
        nleCalloutJSONObject.PicklistValues p = new nleCalloutJSONObject.PicklistValues();
        p.active= true;
        p.defaultValue = true;
        p.label = '';
        p.ValidFor = '';
        p.value = '';
        picks.add(p);
        f.picklistValues = picks;
        f.unique = false;
        List<nleCalloutJSONObject.Fields> lst = new List<nleCalloutJSONObject.Fields>();
        lst.add(f);
        obj.fields =  lst;
        obj.activateable = true;        
        List<nleCalloutJSONObject.ChildRelationships> childs = new List<nleCalloutJSONObject.ChildRelationships>();
        nleCalloutJSONObject.ChildRelationships c = new nleCalloutJSONObject.ChildRelationships();
        c.cascadeDelete = false;
        c.childSObject = '';
        c.deprecatedAndHidden = true;
        c.field = '';
        c.relationshipName = '';
        c.restrictedDelete = true;
        childs.add(c);
        obj.ChildRelationships = childs;
        obj.compactLayoutable = true;
        obj.createable = true;
        obj.custom = true;
        obj.customSetting = true;
        obj.deletable = true;
        obj.deprecatedAndHidden = true;
        obj.feedEnabled = true;
        obj.keyPrefix = '';
        obj.label = '';
        obj.labelPlural = '';
        obj.layoutable = true;
        obj.mergeable = true;
        obj.mruEnabled = true;
        obj.queryable = true;
        
        List<nleCalloutJSONObject.RecordTypeInfos> rts = new List<nleCalloutJSONObject.RecordTypeInfos>();
        nleCalloutJSONObject.RecordTypeInfos rt = new nleCalloutJSONObject.RecordTypeInfos();
        rt.available = true;
        rt.defaultRecordTypeMapping = true;
        rt.master = true;
        rt.name = 'rt1';
        rt.recordTypeId = '';
        rts.add(rt);
        obj.recordTypeInfos = rts;
        obj.replicateable = true;
        obj.retrieveable = true;
        obj.searchLayoutable = true;
        obj.triggerable = true;
        obj.undeletable = true;
        obj.updateable = true;
        List<nleCalloutJSONObject.SupportedScopes> sss = new List<nleCalloutJSONObject.SupportedScopes>();
        nleCalloutJSONObject.SupportedScopes ss = new nleCalloutJSONObject.SupportedScopes();
        ss.label = '';
        ss.name = '';
        sss.add(ss);
        obj.supportedScopes = sss;
        System.assert(obj!=null);
    }
}